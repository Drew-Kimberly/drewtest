<?php
/*
 * demo.module
 *
 * A basic demo of custom modules.
 */

/*
 * Implements hook_permission().
 */
function demo_permission() {
    return array(
        'administer demo module' => array(
            'title' => t('Administer demo module'),
            'description' => t('Perform administrative tasks for the Demo module.'),
        ),
    );
}


/*
 * Implements hook_node_view().
 */
function demo_node_view($node, $view_mode, $langcode) {
    $node->content['demo_field'] = array(
        '#type' => 'markup',
        '#markup' => '<p>'.t('This is only a demo.').'</p>',
        '#weight' => -10,
    );
    $node->content['demo_list'] = array(
        '#items' => array('green', 'blue', 'yellow', 'red'),
        '#theme' => 'item_list',
        '#weight' => -8,
    );
    $node->content['ham_cheese'] = array(
        '#type' => 'markup',
        '#markup' =>'<strong>'.t('I\'m a ham & cheese sandwhich!').'</strong>',
        '#weight' => -9
    );
    //krumo($node);
}


/*
 * Implements hook_menu().
 */
function demo_menu() {
    $items = array();

    $items['admin/reports/node-list'] = array(
        'title' => 'List of Nodes',
        'description' => t('A list of nodes with published status.'),
        'page callback' => 'demo_node_list',
        'access arguments' => array('administer content'),
    );

    return $items;
}

/*
 * Custom page callback for admin/reports/node-list
 *
 * Uses db_select() to retrieve information from our DB
 */
function demo_node_list() {

    //define variants
    $node_types = node_type_get_types(); //Drupal function to get all node types.
    $stati = array(0, 1); //0 = Unpublished, 1 = Published

    //loop through variants
    foreach ($node_types as $type) {
        $typename = $type->type;
        foreach($stati as $status) {
            //SELECT COUNT(*) FROM node WHERE type=$typename AND status=$status
            $query = db_select('node', 'n')
                ->condition('type', $typename)
                ->condition('status', $status);
            $query->addExpression('COUNT (*)', 'node_count'); //addExpression(sql expression, label)
            $result = $query->execute()->fetchObject();

            //Assign vars for printing
            if ($status == 0) {
                $status = 'unpublished';
            }
            else {
                $status = 'published';
            }

            $items[] = t('The %type content type has %num %status nodes.', array('%type'=>$typename, '%num'=>$result->node_count, '%status'=>$status));
        } //end status loop
    } //end node_type loop

    $content['node-list'] = array(
        '#items'=>$items,
        '#theme' =>'item_list',
    );

    return render($content);
}