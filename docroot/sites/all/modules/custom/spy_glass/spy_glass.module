<?php
/*
 * Implements hook_menu().
 */
function spy_glass_menu() {
    $items = array();
    $items['node/%node/spy_glass'] = array(
        'title' => 'Spy Glass',
        'description' => 'Take a closer look',
        'page callback' => 'spy_glass_page',
        'page arguments' => array(1),
        'access callback' => 'node_access',
        'access arguments' => array('view', 1),
        'type' => MENU_LOCAL_TASK,
    );
    return $items;
}

/*
 * Implements hook_theme().
 */
function spy_glass_theme() {
    return array(
        'spy_glass_item' => array( //Template file implementation to render html for element
            'arguments' => array('title' => NULL, 'content' => NULL),
            'template' => 'spy-glass-item', //name of template file "spy-glass-item.tpl.php"
        ),

        /* For theme function implementation
         * 'spy_glass_item' => array( //Keys of outer array are hook names of things we want to declare themeable.
            'variables' => array('item' => NULL),//Passed in to spy_glass_item theme function (default value is null)
        ),*/
    );
}


/*
 * Callback function for spy_glass menu tab
 */
function spy_glass_page($node) {
    $information = _spy_glass_spying_business($node);

    $content = array();
    foreach ($information as $item) {
        $content[]= array(
            '#type' => 'markup',
            '#markup' => theme('spy_glass_item', $item), //Calls theme_spy_glass_item
        );
    }

    return $content;
}

/*
 * Here we can manipulate the variables that are passed
 * to a template file.
 *
 * In this case the template file is "spy-glass-item.tpl.php"
 *
 * The "&" represents we're passing $variables in by reference, therefore
 * we can update the $variables array with sanitized output data.
 *
 * For preprocess functions, we'll always pass in arguments by reference.
 */
function spy_glass_preprocess_spy_glass_item(&$variables) {
    //Note naming convention - {module_name)_preprocess_(hook_name)
    //dsm($variables); - displays $variables item on site... calls preprocess once per item
    $variables['title'] = check_plain($variables['title']);
    $variables['data'] = check_plain($variables['data']);
    $variables['module_name'] = t('Spy Glass'); //Can also add new variables to associative array
}

/*
 * Theme function for spy_glass_theme
 */
/*function theme_spy_glass_item($variables) { //Naming convention for theme -> every theme function takes $variables argument
    //Creates theme function that Drupal's theme system can be overridden, if themer wants to change html of module
    $output = '<p>';
    $output .= '<strong>' . check_plain($variables['title']) . '</strong><br/>';
    $output .= check_plain($variables['data']); //Check_plain sanitizes output to make safe to display on browser
    $output .= '</p>';

    return $output;
}*/


//Helper Functions

/*
 * Collection some information about this node.
 */
function _spy_glass_spying_business($node) {
    $information = array();
    $information[] = array(
        'title' => t('Title Character Count'),
        'data' => t('There are @num characters in the $node->title.', array('@num' => strlen($node->title))),
    );

    $seconds = $node->changed - $node->created;
    $information[] = array(
        'title' => t('Timestamp Differences'),
        'data' => t('The $node->changed timestamp is @seconds different from the $node->created timestamp.', array('@seconds' => $seconds)),
    );

    if ($node->translate == 0) {
        $information[] = array(
            'title'=> t('Translated?'),
            'data'=> t('This node is NOT translated into pirate speak, hope you know English.'),
        );
    }

    $information[] = array(
        'title' => t('Hash'),
        'data' => md5($node->title),
    );

    //Example of potential user input data that needs to be sanitized.
    //Instead of hard-coding this, it could be getting loaded from the db
    //where a user has entered the info.
    $information[] = array(
        'title' => t('Nefarious data'),
        'data' => '<a href="#" onclick="alert(\'Powned!\'); return false;">click me</a>',
    );

    return $information;
}